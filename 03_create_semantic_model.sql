-- =====================================================================
-- Snowflake Intelligence Demo: Credit Union
-- File: 03_create_semantic_model.sql
-- Purpose: Create semantic views for Snowflake Intelligence agent
-- =====================================================================

USE DATABASE CREDIT_UNION_DEMO;
USE SCHEMA CREDIT_UNION_DATA;

-- =====================================================================
-- SEMANTIC VIEW 1: MEMBER_ACQUISITION_VIEW
-- Purpose: Track new member acquisition trends and effectiveness
-- Key Questions: 
--   - How many new members in a period?
--   - Which channels are most effective?
--   - Which branches are growing?
-- =====================================================================
CREATE OR REPLACE VIEW MEMBER_ACQUISITION_VIEW
COMMENT = 'Member acquisition metrics with time dimensions and channel attribution'
AS
SELECT 
    -- Member identifiers
    M.MEMBER_ID,
    M.MEMBER_NUMBER,
    M.FIRST_NAME || ' ' || M.LAST_NAME AS MEMBER_NAME,
    
    -- Acquisition details
    M.JOIN_DATE,
    YEAR(M.JOIN_DATE) AS JOIN_YEAR,
    QUARTER(M.JOIN_DATE) AS JOIN_QUARTER,
    MONTH(M.JOIN_DATE) AS JOIN_MONTH,
    MONTHNAME(M.JOIN_DATE) AS JOIN_MONTH_NAME,
    DAYOFWEEK(M.JOIN_DATE) AS JOIN_DAY_OF_WEEK,
    DAYNAME(M.JOIN_DATE) AS JOIN_DAY_NAME,
    DATE_TRUNC('MONTH', M.JOIN_DATE) AS JOIN_MONTH_START,
    DATE_TRUNC('QUARTER', M.JOIN_DATE) AS JOIN_QUARTER_START,
    DATE_TRUNC('YEAR', M.JOIN_DATE) AS JOIN_YEAR_START,
    
    -- Time intelligence
    DATEDIFF(day, M.JOIN_DATE, CURRENT_DATE()) AS DAYS_AS_MEMBER,
    DATEDIFF(month, M.JOIN_DATE, CURRENT_DATE()) AS MONTHS_AS_MEMBER,
    DATEDIFF(year, M.JOIN_DATE, CURRENT_DATE()) AS YEARS_AS_MEMBER,
    
    -- Member attributes
    M.MEMBER_STATUS,
    M.MEMBER_SEGMENT,
    M.RISK_RATING,
    M.MARKETING_CHANNEL,
    M.EMPLOYMENT_STATUS,
    M.ANNUAL_INCOME,
    
    -- Branch information
    M.PRIMARY_BRANCH_ID,
    B.BRANCH_NAME,
    B.BRANCH_CODE,
    B.CITY AS BRANCH_CITY,
    B.STATE AS BRANCH_STATE,
    B.REGION AS BRANCH_REGION,
    B.BRANCH_TYPE,
    
    -- Demographics
    M.DATE_OF_BIRTH,
    DATEDIFF(year, M.DATE_OF_BIRTH, M.JOIN_DATE) AS AGE_AT_JOIN,
    DATEDIFF(year, M.DATE_OF_BIRTH, CURRENT_DATE()) AS CURRENT_AGE,
    M.CITY AS MEMBER_CITY,
    M.STATE AS MEMBER_STATE,
    M.ZIP_CODE AS MEMBER_ZIP,
    
    -- Relationship depth (calculated from other tables)
    (SELECT COUNT(DISTINCT ACCOUNT_ID) FROM ACCOUNTS WHERE MEMBER_ID = M.MEMBER_ID) AS TOTAL_ACCOUNTS,
    (SELECT COUNT(DISTINCT LOAN_ID) FROM LOANS WHERE MEMBER_ID = M.MEMBER_ID) AS TOTAL_LOANS,
    (SELECT SUM(CURRENT_BALANCE) FROM ACCOUNTS WHERE MEMBER_ID = M.MEMBER_ID) AS TOTAL_DEPOSIT_BALANCE,
    (SELECT SUM(CURRENT_BALANCE) FROM LOANS WHERE MEMBER_ID = M.MEMBER_ID AND LOAN_STATUS = 'Active') AS TOTAL_LOAN_BALANCE,
    
    -- Flags for analysis
    CASE WHEN DATEDIFF(month, M.JOIN_DATE, CURRENT_DATE()) <= 3 THEN 1 ELSE 0 END AS IS_NEW_MEMBER_90_DAYS,
    CASE WHEN DATEDIFF(month, M.JOIN_DATE, CURRENT_DATE()) <= 6 THEN 1 ELSE 0 END AS IS_NEW_MEMBER_6_MONTHS,
    CASE WHEN DATEDIFF(month, M.JOIN_DATE, CURRENT_DATE()) <= 12 THEN 1 ELSE 0 END AS IS_NEW_MEMBER_12_MONTHS,
    CASE WHEN M.MARKETING_CHANNEL = 'Referral' THEN 1 ELSE 0 END AS IS_REFERRAL,
    CASE WHEN M.MARKETING_CHANNEL IN ('Online', 'Social Media', 'Email Campaign') THEN 1 ELSE 0 END AS IS_DIGITAL_CHANNEL,
    
    -- Timestamps
    M.CREATED_AT,
    M.UPDATED_AT
FROM MEMBERS M
LEFT JOIN BRANCHES B ON M.PRIMARY_BRANCH_ID = B.BRANCH_ID;

-- =====================================================================
-- SEMANTIC VIEW 2: CERTIFICATE_RENEWAL_VIEW
-- Purpose: Track certificate (CD) maturities and renewal opportunities
-- Key Questions:
--   - How many certificates are maturing soon?
--   - Which branches have the most renewals?
--   - What is the total value of maturing CDs?
-- =====================================================================
CREATE OR REPLACE VIEW CERTIFICATE_RENEWAL_VIEW
COMMENT = 'Certificate of deposit maturity tracking and renewal analysis'
AS
SELECT 
    -- Account identifiers
    A.ACCOUNT_ID,
    A.ACCOUNT_NUMBER,
    
    -- Member information
    A.MEMBER_ID,
    M.MEMBER_NUMBER,
    M.FIRST_NAME || ' ' || M.LAST_NAME AS MEMBER_NAME,
    M.EMAIL AS MEMBER_EMAIL,
    M.PHONE AS MEMBER_PHONE,
    M.MEMBER_SEGMENT,
    M.MEMBER_STATUS,
    
    -- Branch information
    A.BRANCH_ID,
    B.BRANCH_NAME,
    B.BRANCH_CODE,
    B.CITY AS BRANCH_CITY,
    B.STATE AS BRANCH_STATE,
    B.REGION AS BRANCH_REGION,
    B.MANAGER_NAME AS BRANCH_MANAGER,
    
    -- Certificate details
    A.OPEN_DATE AS CERTIFICATE_OPEN_DATE,
    A.MATURITY_DATE,
    A.CERTIFICATE_TERM_MONTHS,
    A.ORIGINAL_DEPOSIT_AMOUNT,
    A.CURRENT_BALANCE,
    A.INTEREST_RATE,
    A.RENEWAL_STATUS,
    A.ACCOUNT_STATUS,
    
    -- Time calculations
    DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) AS DAYS_UNTIL_MATURITY,
    DATEDIFF(month, CURRENT_DATE(), A.MATURITY_DATE) AS MONTHS_UNTIL_MATURITY,
    DATEDIFF(day, A.OPEN_DATE, A.MATURITY_DATE) AS TOTAL_TERM_DAYS,
    DATEDIFF(day, A.OPEN_DATE, CURRENT_DATE()) AS DAYS_SINCE_OPEN,
    
    -- Maturity date dimensions
    YEAR(A.MATURITY_DATE) AS MATURITY_YEAR,
    QUARTER(A.MATURITY_DATE) AS MATURITY_QUARTER,
    MONTH(A.MATURITY_DATE) AS MATURITY_MONTH,
    MONTHNAME(A.MATURITY_DATE) AS MATURITY_MONTH_NAME,
    DATE_TRUNC('MONTH', A.MATURITY_DATE) AS MATURITY_MONTH_START,
    DATE_TRUNC('QUARTER', A.MATURITY_DATE) AS MATURITY_QUARTER_START,
    
    -- Interest earned calculation
    A.CURRENT_BALANCE - A.ORIGINAL_DEPOSIT_AMOUNT AS INTEREST_EARNED_TO_DATE,
    
    -- Renewal urgency flags
    CASE 
        WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) <= 30 THEN 'Immediate (30 days)'
        WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) <= 60 THEN 'Soon (60 days)'
        WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) <= 90 THEN 'Upcoming (90 days)'
        WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) <= 180 THEN 'Future (6 months)'
        WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) > 180 THEN 'Distant (6+ months)'
        ELSE 'Matured'
    END AS RENEWAL_URGENCY,
    
    CASE WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) BETWEEN 0 AND 30 THEN 1 ELSE 0 END AS IS_MATURING_30_DAYS,
    CASE WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) BETWEEN 0 AND 60 THEN 1 ELSE 0 END AS IS_MATURING_60_DAYS,
    CASE WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) BETWEEN 0 AND 90 THEN 1 ELSE 0 END AS IS_MATURING_90_DAYS,
    CASE WHEN DATEDIFF(day, CURRENT_DATE(), A.MATURITY_DATE) BETWEEN 0 AND 180 THEN 1 ELSE 0 END AS IS_MATURING_6_MONTHS,
    CASE WHEN A.MATURITY_DATE < CURRENT_DATE() THEN 1 ELSE 0 END AS IS_MATURED,
    CASE WHEN A.RENEWAL_STATUS = 'Auto-Renew' THEN 1 ELSE 0 END AS IS_AUTO_RENEW,
    
    -- Value tiers
    CASE 
        WHEN A.CURRENT_BALANCE >= 100000 THEN 'Premium ($100K+)'
        WHEN A.CURRENT_BALANCE >= 50000 THEN 'High Value ($50K-$100K)'
        WHEN A.CURRENT_BALANCE >= 25000 THEN 'Mid Value ($25K-$50K)'
        WHEN A.CURRENT_BALANCE >= 10000 THEN 'Standard ($10K-$25K)'
        ELSE 'Entry Level (<$10K)'
    END AS CERTIFICATE_VALUE_TIER,
    
    -- Timestamps
    A.CREATED_AT,
    A.UPDATED_AT
FROM ACCOUNTS A
INNER JOIN MEMBERS M ON A.MEMBER_ID = M.MEMBER_ID
INNER JOIN BRANCHES B ON A.BRANCH_ID = B.BRANCH_ID
WHERE A.ACCOUNT_TYPE = 'Certificate'
    AND A.ACCOUNT_STATUS = 'Active';

-- =====================================================================
-- SEMANTIC VIEW 3: LOAN_PORTFOLIO_VIEW
-- Purpose: Comprehensive loan portfolio analysis with trends
-- Key Questions:
--   - How are auto loan balances trending?
--   - What percentage of total portfolio is each loan type?
--   - What is portfolio health by loan type?
-- =====================================================================
CREATE OR REPLACE VIEW LOAN_PORTFOLIO_VIEW
COMMENT = 'Comprehensive loan portfolio metrics and trends'
AS
SELECT 
    -- Loan identifiers
    L.LOAN_ID,
    L.LOAN_NUMBER,
    L.LOAN_TYPE,
    L.LOAN_STATUS,
    
    -- Member information
    L.MEMBER_ID,
    M.MEMBER_NUMBER,
    M.FIRST_NAME || ' ' || M.LAST_NAME AS MEMBER_NAME,
    M.MEMBER_SEGMENT,
    M.ANNUAL_INCOME AS MEMBER_INCOME,
    
    -- Branch information
    L.BRANCH_ID,
    B.BRANCH_NAME,
    B.BRANCH_CODE,
    B.REGION AS BRANCH_REGION,
    
    -- Loan dates and time dimensions
    L.ORIGINATION_DATE,
    YEAR(L.ORIGINATION_DATE) AS ORIGINATION_YEAR,
    QUARTER(L.ORIGINATION_DATE) AS ORIGINATION_QUARTER,
    MONTH(L.ORIGINATION_DATE) AS ORIGINATION_MONTH,
    MONTHNAME(L.ORIGINATION_DATE) AS ORIGINATION_MONTH_NAME,
    DATE_TRUNC('MONTH', L.ORIGINATION_DATE) AS ORIGINATION_MONTH_START,
    DATE_TRUNC('QUARTER', L.ORIGINATION_DATE) AS ORIGINATION_QUARTER_START,
    DATE_TRUNC('YEAR', L.ORIGINATION_DATE) AS ORIGINATION_YEAR_START,
    
    -- Time intelligence
    DATEDIFF(month, L.ORIGINATION_DATE, CURRENT_DATE()) AS MONTHS_SINCE_ORIGINATION,
    DATEDIFF(year, L.ORIGINATION_DATE, CURRENT_DATE()) AS YEARS_SINCE_ORIGINATION,
    
    -- Loan financials
    L.ORIGINAL_LOAN_AMOUNT,
    L.CURRENT_BALANCE,
    L.ORIGINAL_LOAN_AMOUNT - L.CURRENT_BALANCE AS PRINCIPAL_PAID,
    CASE 
        WHEN L.ORIGINAL_LOAN_AMOUNT > 0 
        THEN (L.ORIGINAL_LOAN_AMOUNT - L.CURRENT_BALANCE) / L.ORIGINAL_LOAN_AMOUNT 
        ELSE 0 
    END AS PAYDOWN_PERCENTAGE,
    L.INTEREST_RATE,
    L.TERM_MONTHS,
    L.MONTHLY_PAYMENT,
    
    -- Credit card specific
    L.CREDIT_LIMIT,
    L.AVAILABLE_CREDIT,
    CASE 
        WHEN L.CREDIT_LIMIT > 0 
        THEN L.CURRENT_BALANCE / L.CREDIT_LIMIT 
        ELSE 0 
    END AS CREDIT_UTILIZATION,
    
    -- Credit quality
    L.ORIGINATION_CREDIT_SCORE,
    L.CURRENT_CREDIT_SCORE,
    L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE AS CREDIT_SCORE_CHANGE,
    L.DAYS_DELINQUENT,
    L.LOAN_TO_VALUE_RATIO,
    L.COLLATERAL_TYPE,
    
    -- Payment information
    L.LAST_PAYMENT_DATE,
    L.LAST_PAYMENT_AMOUNT,
    L.NEXT_PAYMENT_DATE,
    L.CLOSE_DATE,
    
    -- Status flags
    CASE WHEN L.LOAN_STATUS = 'Active' THEN 1 ELSE 0 END AS IS_ACTIVE,
    CASE WHEN L.LOAN_STATUS = 'Paid Off' THEN 1 ELSE 0 END AS IS_PAID_OFF,
    CASE WHEN L.LOAN_STATUS = 'Charged Off' THEN 1 ELSE 0 END AS IS_CHARGED_OFF,
    CASE WHEN L.LOAN_STATUS = 'Delinquent' THEN 1 ELSE 0 END AS IS_DELINQUENT,
    CASE WHEN L.DAYS_DELINQUENT > 0 THEN 1 ELSE 0 END AS HAS_DELINQUENCY,
    CASE WHEN L.DAYS_DELINQUENT >= 30 THEN 1 ELSE 0 END AS IS_30_DAYS_LATE,
    CASE WHEN L.DAYS_DELINQUENT >= 60 THEN 1 ELSE 0 END AS IS_60_DAYS_LATE,
    CASE WHEN L.DAYS_DELINQUENT >= 90 THEN 1 ELSE 0 END AS IS_90_DAYS_LATE,
    
    -- Loan type flags
    CASE WHEN L.LOAN_TYPE = 'Auto' THEN 1 ELSE 0 END AS IS_AUTO_LOAN,
    CASE WHEN L.LOAN_TYPE = 'Credit Card' THEN 1 ELSE 0 END AS IS_CREDIT_CARD,
    CASE WHEN L.LOAN_TYPE = 'Mortgage' THEN 1 ELSE 0 END AS IS_MORTGAGE,
    CASE WHEN L.LOAN_TYPE = 'Personal' THEN 1 ELSE 0 END AS IS_PERSONAL_LOAN,
    
    -- Origination period flags (for cohort analysis)
    CASE WHEN L.ORIGINATION_DATE >= DATEADD(month, -3, CURRENT_DATE()) THEN 1 ELSE 0 END AS ORIGINATED_LAST_3_MONTHS,
    CASE WHEN L.ORIGINATION_DATE >= DATEADD(month, -6, CURRENT_DATE()) THEN 1 ELSE 0 END AS ORIGINATED_LAST_6_MONTHS,
    CASE WHEN L.ORIGINATION_DATE >= DATEADD(month, -12, CURRENT_DATE()) THEN 1 ELSE 0 END AS ORIGINATED_LAST_12_MONTHS,
    CASE WHEN L.ORIGINATION_DATE >= DATEADD(month, -24, CURRENT_DATE()) THEN 1 ELSE 0 END AS ORIGINATED_LAST_24_MONTHS,
    
    -- Credit score bands
    CASE 
        WHEN L.ORIGINATION_CREDIT_SCORE >= 800 THEN 'Excellent (800+)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 740 THEN 'Very Good (740-799)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 670 THEN 'Good (670-739)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 580 THEN 'Fair (580-669)'
        ELSE 'Poor (<580)'
    END AS ORIGINATION_CREDIT_BAND,
    
    CASE 
        WHEN L.CURRENT_CREDIT_SCORE >= 800 THEN 'Excellent (800+)'
        WHEN L.CURRENT_CREDIT_SCORE >= 740 THEN 'Very Good (740-799)'
        WHEN L.CURRENT_CREDIT_SCORE >= 670 THEN 'Good (670-739)'
        WHEN L.CURRENT_CREDIT_SCORE >= 580 THEN 'Fair (580-669)'
        ELSE 'Poor (<580)'
    END AS CURRENT_CREDIT_BAND,
    
    -- Credit migration category
    CASE 
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE >= 50 THEN 'Significant Improvement'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE >= 20 THEN 'Moderate Improvement'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE BETWEEN -19 AND 19 THEN 'Stable'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE BETWEEN -49 AND -20 THEN 'Moderate Decline'
        ELSE 'Significant Decline'
    END AS CREDIT_MIGRATION,
    
    -- Risk categories
    CASE 
        WHEN L.LOAN_STATUS = 'Charged Off' THEN 'High Risk'
        WHEN L.LOAN_STATUS = 'Delinquent' OR L.DAYS_DELINQUENT >= 30 THEN 'Elevated Risk'
        WHEN L.CURRENT_CREDIT_SCORE < 620 THEN 'Moderate Risk'
        ELSE 'Low Risk'
    END AS RISK_CATEGORY,
    
    -- Timestamps
    L.CREATED_AT,
    L.UPDATED_AT
FROM LOANS L
INNER JOIN MEMBERS M ON L.MEMBER_ID = M.MEMBER_ID
INNER JOIN BRANCHES B ON L.BRANCH_ID = B.BRANCH_ID;

-- =====================================================================
-- SEMANTIC VIEW 4: CREDIT_CARD_HEALTH_VIEW
-- Purpose: Detailed credit card portfolio health analysis
-- Key Questions:
--   - What is credit score migration for credit cards?
--   - What is credit utilization by cohort?
--   - How many charge-offs by origination period?
-- =====================================================================
CREATE OR REPLACE VIEW CREDIT_CARD_HEALTH_VIEW
COMMENT = 'Credit card portfolio health metrics with credit score migration analysis'
AS
SELECT 
    -- Loan identifiers
    L.LOAN_ID,
    L.LOAN_NUMBER,
    L.LOAN_STATUS,
    
    -- Member information
    L.MEMBER_ID,
    M.MEMBER_NUMBER,
    M.FIRST_NAME || ' ' || M.LAST_NAME AS MEMBER_NAME,
    M.MEMBER_SEGMENT,
    M.MEMBER_STATUS,
    M.ANNUAL_INCOME AS MEMBER_INCOME,
    
    -- Branch information
    L.BRANCH_ID,
    B.BRANCH_NAME,
    B.BRANCH_CODE,
    B.REGION AS BRANCH_REGION,
    
    -- Origination details
    L.ORIGINATION_DATE,
    YEAR(L.ORIGINATION_DATE) AS ORIGINATION_YEAR,
    QUARTER(L.ORIGINATION_DATE) AS ORIGINATION_QUARTER,
    MONTH(L.ORIGINATION_DATE) AS ORIGINATION_MONTH,
    MONTHNAME(L.ORIGINATION_DATE) AS ORIGINATION_MONTH_NAME,
    DATE_TRUNC('MONTH', L.ORIGINATION_DATE) AS ORIGINATION_MONTH_START,
    DATE_TRUNC('QUARTER', L.ORIGINATION_DATE) AS ORIGINATION_QUARTER_START,
    DATEDIFF(month, L.ORIGINATION_DATE, CURRENT_DATE()) AS MONTHS_ON_BOOK,
    
    -- Credit limit and balances
    L.CREDIT_LIMIT,
    L.CURRENT_BALANCE,
    L.AVAILABLE_CREDIT,
    L.CREDIT_LIMIT - L.CURRENT_BALANCE AS CALCULATED_AVAILABLE_CREDIT,
    
    -- Utilization metrics
    CASE 
        WHEN L.CREDIT_LIMIT > 0 
        THEN (L.CURRENT_BALANCE / L.CREDIT_LIMIT) * 100 
        ELSE 0 
    END AS UTILIZATION_PERCENTAGE,
    
    CASE 
        WHEN L.CREDIT_LIMIT > 0 AND (L.CURRENT_BALANCE / L.CREDIT_LIMIT) >= 0.90 THEN 'Very High (90%+)'
        WHEN L.CREDIT_LIMIT > 0 AND (L.CURRENT_BALANCE / L.CREDIT_LIMIT) >= 0.70 THEN 'High (70-89%)'
        WHEN L.CREDIT_LIMIT > 0 AND (L.CURRENT_BALANCE / L.CREDIT_LIMIT) >= 0.50 THEN 'Moderate (50-69%)'
        WHEN L.CREDIT_LIMIT > 0 AND (L.CURRENT_BALANCE / L.CREDIT_LIMIT) >= 0.30 THEN 'Low (30-49%)'
        ELSE 'Very Low (<30%)'
    END AS UTILIZATION_BAND,
    
    -- Credit score tracking
    L.ORIGINATION_CREDIT_SCORE,
    L.CURRENT_CREDIT_SCORE,
    L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE AS CREDIT_SCORE_CHANGE,
    ABS(L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE) AS CREDIT_SCORE_CHANGE_ABS,
    
    -- Credit score bands
    CASE 
        WHEN L.ORIGINATION_CREDIT_SCORE >= 800 THEN 'Excellent (800+)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 740 THEN 'Very Good (740-799)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 670 THEN 'Good (670-739)'
        WHEN L.ORIGINATION_CREDIT_SCORE >= 580 THEN 'Fair (580-669)'
        ELSE 'Poor (<580)'
    END AS ORIGINATION_CREDIT_BAND,
    
    CASE 
        WHEN L.CURRENT_CREDIT_SCORE >= 800 THEN 'Excellent (800+)'
        WHEN L.CURRENT_CREDIT_SCORE >= 740 THEN 'Very Good (740-799)'
        WHEN L.CURRENT_CREDIT_SCORE >= 670 THEN 'Good (670-739)'
        WHEN L.CURRENT_CREDIT_SCORE >= 580 THEN 'Fair (580-669)'
        ELSE 'Poor (<580)'
    END AS CURRENT_CREDIT_BAND,
    
    -- Credit migration analysis
    CASE 
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE >= 50 THEN 'Significant Improvement (50+ points)'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE >= 20 THEN 'Moderate Improvement (20-49 points)'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE >= 10 THEN 'Slight Improvement (10-19 points)'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE BETWEEN -9 AND 9 THEN 'Stable (+/-10 points)'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE BETWEEN -19 AND -10 THEN 'Slight Decline (10-19 points)'
        WHEN L.CURRENT_CREDIT_SCORE - L.ORIGINATION_CREDIT_SCORE BETWEEN -49 AND -20 THEN 'Moderate Decline (20-49 points)'
        ELSE 'Significant Decline (50+ points)'
    END AS CREDIT_MIGRATION_CATEGORY,
    
    -- Interest rate and payments
    L.INTEREST_RATE,
    L.MONTHLY_PAYMENT,
    L.LAST_PAYMENT_DATE,
    L.LAST_PAYMENT_AMOUNT,
    
    -- Delinquency tracking
    L.DAYS_DELINQUENT,
    CASE 
        WHEN L.DAYS_DELINQUENT = 0 THEN 'Current'
        WHEN L.DAYS_DELINQUENT BETWEEN 1 AND 29 THEN '1-29 Days'
        WHEN L.DAYS_DELINQUENT BETWEEN 30 AND 59 THEN '30-59 Days'
        WHEN L.DAYS_DELINQUENT BETWEEN 60 AND 89 THEN '60-89 Days'
        WHEN L.DAYS_DELINQUENT >= 90 THEN '90+ Days'
        ELSE 'Unknown'
    END AS DELINQUENCY_BUCKET,
    
    -- Status flags
    CASE WHEN L.LOAN_STATUS = 'Active' THEN 1 ELSE 0 END AS IS_ACTIVE,
    CASE WHEN L.LOAN_STATUS = 'Inactive' THEN 1 ELSE 0 END AS IS_INACTIVE,
    CASE WHEN L.LOAN_STATUS = 'Charged Off' THEN 1 ELSE 0 END AS IS_CHARGED_OFF,
    CASE WHEN L.DAYS_DELINQUENT >= 30 THEN 1 ELSE 0 END AS IS_30_PLUS_DELINQUENT,
    CASE WHEN L.DAYS_DELINQUENT >= 60 THEN 1 ELSE 0 END AS IS_60_PLUS_DELINQUENT,
    CASE WHEN L.DAYS_DELINQUENT >= 90 THEN 1 ELSE 0 END AS IS_90_PLUS_DELINQUENT,
    
    -- Origination cohorts
    CASE 
        WHEN L.ORIGINATION_DATE >= DATEADD(month, -3, CURRENT_DATE()) THEN 'Last 3 Months'
        WHEN L.ORIGINATION_DATE >= DATEADD(month, -6, CURRENT_DATE()) THEN 'Last 6 Months'
        WHEN L.ORIGINATION_DATE >= DATEADD(month, -12, CURRENT_DATE()) THEN 'Last 12 Months'
        WHEN L.ORIGINATION_DATE >= DATEADD(month, -24, CURRENT_DATE()) THEN 'Last 24 Months'
        ELSE 'Over 24 Months'
    END AS ORIGINATION_COHORT,
    
    -- Risk indicators
    CASE 
        WHEN L.LOAN_STATUS = 'Charged Off' THEN 'Critical'
        WHEN L.DAYS_DELINQUENT >= 90 THEN 'Severe'
        WHEN L.DAYS_DELINQUENT >= 60 THEN 'High'
        WHEN L.DAYS_DELINQUENT >= 30 THEN 'Elevated'
        WHEN L.CREDIT_LIMIT > 0 AND (L.CURRENT_BALANCE / L.CREDIT_LIMIT) >= 0.90 THEN 'Moderate'
        WHEN L.CURRENT_CREDIT_SCORE < 620 THEN 'Watch'
        ELSE 'Low'
    END AS RISK_LEVEL,
    
    -- Revenue potential (annual interest revenue)
    L.CURRENT_BALANCE * L.INTEREST_RATE AS ESTIMATED_ANNUAL_INTEREST_REVENUE,
    
    -- Timestamps
    L.CREATED_AT,
    L.UPDATED_AT
FROM LOANS L
INNER JOIN MEMBERS M ON L.MEMBER_ID = M.MEMBER_ID
INNER JOIN BRANCHES B ON L.BRANCH_ID = B.BRANCH_ID
WHERE L.LOAN_TYPE = 'Credit Card';

-- =====================================================================
-- SEMANTIC VIEW 5: BRANCH_PERFORMANCE_VIEW
-- Purpose: Branch-level performance metrics across all products
-- Key Questions:
--   - Which branches are top performers?
--   - How does Encinitas compare to other branches?
--   - What is product mix by branch?
-- =====================================================================
CREATE OR REPLACE VIEW BRANCH_PERFORMANCE_VIEW
COMMENT = 'Branch performance metrics across deposits, loans, and members'
AS
SELECT 
    -- Branch identifiers
    B.BRANCH_ID,
    B.BRANCH_NAME,
    B.BRANCH_CODE,
    B.CITY AS BRANCH_CITY,
    B.STATE AS BRANCH_STATE,
    B.REGION,
    B.BRANCH_TYPE,
    B.MANAGER_NAME,
    B.OPEN_DATE AS BRANCH_OPEN_DATE,
    DATEDIFF(year, B.OPEN_DATE, CURRENT_DATE()) AS YEARS_OPEN,
    
    -- Member metrics
    (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID) AS TOTAL_MEMBERS,
    (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID AND MEMBER_STATUS = 'Active') AS ACTIVE_MEMBERS,
    (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID 
        AND JOIN_DATE >= DATEADD(month, -12, CURRENT_DATE())) AS NEW_MEMBERS_12_MONTHS,
    (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID 
        AND JOIN_DATE >= DATEADD(month, -6, CURRENT_DATE())) AS NEW_MEMBERS_6_MONTHS,
    (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID 
        AND JOIN_DATE >= DATEADD(month, -3, CURRENT_DATE())) AS NEW_MEMBERS_3_MONTHS,
    
    -- Account metrics
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID) AS TOTAL_ACCOUNTS,
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID AND ACCOUNT_TYPE = 'Checking') AS CHECKING_ACCOUNTS,
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID AND ACCOUNT_TYPE = 'Savings') AS SAVINGS_ACCOUNTS,
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID AND ACCOUNT_TYPE = 'Certificate') AS CERTIFICATE_ACCOUNTS,
    
    -- Deposit balances
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID) AS TOTAL_DEPOSITS,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Checking') AS CHECKING_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Savings') AS SAVINGS_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Certificate') AS CERTIFICATE_BALANCE,
    
    -- Loan metrics
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID) AS TOTAL_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_STATUS = 'Active') AS ACTIVE_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_TYPE = 'Auto') AS AUTO_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_TYPE = 'Credit Card') AS CREDIT_CARD_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_TYPE = 'Mortgage') AS MORTGAGE_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_TYPE = 'Personal') AS PERSONAL_LOANS,
    
    -- Loan balances
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_STATUS = 'Active') AS TOTAL_LOAN_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_TYPE = 'Auto' AND LOAN_STATUS = 'Active') AS AUTO_LOAN_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_TYPE = 'Credit Card' AND LOAN_STATUS = 'Active') AS CREDIT_CARD_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_TYPE = 'Mortgage' AND LOAN_STATUS = 'Active') AS MORTGAGE_BALANCE,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_TYPE = 'Personal' AND LOAN_STATUS = 'Active') AS PERSONAL_LOAN_BALANCE,
    
    -- Certificate renewal metrics
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Certificate' 
        AND MATURITY_DATE BETWEEN CURRENT_DATE() AND DATEADD(day, 30, CURRENT_DATE())) AS CERTIFICATES_MATURING_30_DAYS,
    (SELECT COUNT(*) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Certificate' 
        AND MATURITY_DATE BETWEEN CURRENT_DATE() AND DATEADD(day, 90, CURRENT_DATE())) AS CERTIFICATES_MATURING_90_DAYS,
    (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID 
        AND ACCOUNT_TYPE = 'Certificate' 
        AND MATURITY_DATE BETWEEN CURRENT_DATE() AND DATEADD(day, 90, CURRENT_DATE())) AS VALUE_MATURING_90_DAYS,
    
    -- Credit quality
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND LOAN_STATUS = 'Charged Off') AS CHARGED_OFF_LOANS,
    (SELECT COUNT(*) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND DAYS_DELINQUENT >= 30) AS DELINQUENT_LOANS_30_PLUS,
    (SELECT COALESCE(AVG(CURRENT_CREDIT_SCORE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID 
        AND CURRENT_CREDIT_SCORE IS NOT NULL) AS AVG_CREDIT_SCORE,
    
    -- Calculated metrics
    CASE 
        WHEN (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID) > 0
        THEN (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM ACCOUNTS WHERE BRANCH_ID = B.BRANCH_ID) / 
             (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID)
        ELSE 0
    END AS AVG_DEPOSIT_PER_MEMBER,
    
    CASE 
        WHEN (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID AND MEMBER_STATUS = 'Active') > 0
        THEN (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS WHERE BRANCH_ID = B.BRANCH_ID AND LOAN_STATUS = 'Active') / 
             (SELECT COUNT(*) FROM MEMBERS WHERE PRIMARY_BRANCH_ID = B.BRANCH_ID AND MEMBER_STATUS = 'Active')
        ELSE 0
    END AS AVG_LOAN_PER_ACTIVE_MEMBER,
    
    -- Timestamps
    B.CREATED_AT
FROM BRANCHES B;

-- =====================================================================
-- SEMANTIC VIEW 6: TIME_SERIES_METRICS_VIEW
-- Purpose: Time-based trending for all key metrics
-- Key Questions:
--   - How are loan balances trending over time?
--   - What is month-over-month growth?
--   - What are seasonal patterns?
-- =====================================================================
CREATE OR REPLACE VIEW TIME_SERIES_METRICS_VIEW
COMMENT = 'Time series metrics for trending analysis across all products'
AS
WITH date_spine AS (
    -- Generate last 24 months of data
    SELECT 
        DATEADD(month, -SEQ4(), DATE_TRUNC('MONTH', CURRENT_DATE())) AS METRIC_MONTH
    FROM TABLE(GENERATOR(ROWCOUNT => 24))
),
monthly_metrics AS (
    SELECT 
        DS.METRIC_MONTH,
        YEAR(DS.METRIC_MONTH) AS METRIC_YEAR,
        QUARTER(DS.METRIC_MONTH) AS METRIC_QUARTER,
        MONTH(DS.METRIC_MONTH) AS METRIC_MONTH_NUMBER,
        MONTHNAME(DS.METRIC_MONTH) AS METRIC_MONTH_NAME,
        
        -- Member metrics
        (SELECT COUNT(*) FROM MEMBERS 
            WHERE JOIN_DATE <= LAST_DAY(DS.METRIC_MONTH)) AS TOTAL_MEMBERS_EOY,
        (SELECT COUNT(*) FROM MEMBERS 
            WHERE DATE_TRUNC('MONTH', JOIN_DATE) = DS.METRIC_MONTH) AS NEW_MEMBERS_MONTH,
        
        -- Account metrics
        (SELECT COUNT(*) FROM ACCOUNTS 
            WHERE OPEN_DATE <= LAST_DAY(DS.METRIC_MONTH) 
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))) AS TOTAL_ACCOUNTS_EOM,
        
        -- Loan origination metrics by type
        (SELECT COUNT(*) FROM LOANS 
            WHERE DATE_TRUNC('MONTH', ORIGINATION_DATE) = DS.METRIC_MONTH) AS LOANS_ORIGINATED,
        (SELECT COUNT(*) FROM LOANS 
            WHERE DATE_TRUNC('MONTH', ORIGINATION_DATE) = DS.METRIC_MONTH 
            AND LOAN_TYPE = 'Auto') AS AUTO_LOANS_ORIGINATED,
        (SELECT COUNT(*) FROM LOANS 
            WHERE DATE_TRUNC('MONTH', ORIGINATION_DATE) = DS.METRIC_MONTH 
            AND LOAN_TYPE = 'Credit Card') AS CREDIT_CARDS_ORIGINATED,
        (SELECT COUNT(*) FROM LOANS 
            WHERE DATE_TRUNC('MONTH', ORIGINATION_DATE) = DS.METRIC_MONTH 
            AND LOAN_TYPE = 'Mortgage') AS MORTGAGES_ORIGINATED,
        
        -- Balance metrics (snapshot at end of month)
        (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS 
            WHERE ORIGINATION_DATE <= LAST_DAY(DS.METRIC_MONTH)
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))
            AND LOAN_TYPE = 'Auto') AS AUTO_LOAN_BALANCE_EOM,
        (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS 
            WHERE ORIGINATION_DATE <= LAST_DAY(DS.METRIC_MONTH)
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))
            AND LOAN_TYPE = 'Credit Card') AS CREDIT_CARD_BALANCE_EOM,
        (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS 
            WHERE ORIGINATION_DATE <= LAST_DAY(DS.METRIC_MONTH)
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))
            AND LOAN_TYPE = 'Mortgage') AS MORTGAGE_BALANCE_EOM,
        (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS 
            WHERE ORIGINATION_DATE <= LAST_DAY(DS.METRIC_MONTH)
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))
            AND LOAN_TYPE = 'Personal') AS PERSONAL_LOAN_BALANCE_EOM,
        (SELECT COALESCE(SUM(CURRENT_BALANCE), 0) FROM LOANS 
            WHERE ORIGINATION_DATE <= LAST_DAY(DS.METRIC_MONTH)
            AND (CLOSE_DATE IS NULL OR CLOSE_DATE > LAST_DAY(DS.METRIC_MONTH))) AS TOTAL_LOAN_BALANCE_EOM
            
    FROM date_spine DS
)
SELECT 
    METRIC_MONTH,
    METRIC_YEAR,
    METRIC_QUARTER,
    METRIC_MONTH_NUMBER,
    METRIC_MONTH_NAME,
    
    -- Member growth
    TOTAL_MEMBERS_EOY,
    NEW_MEMBERS_MONTH,
    
    -- Account growth
    TOTAL_ACCOUNTS_EOM,
    
    -- Loan originations
    LOANS_ORIGINATED,
    AUTO_LOANS_ORIGINATED,
    CREDIT_CARDS_ORIGINATED,
    MORTGAGES_ORIGINATED,
    
    -- Loan balances
    AUTO_LOAN_BALANCE_EOM,
    CREDIT_CARD_BALANCE_EOM,
    MORTGAGE_BALANCE_EOM,
    PERSONAL_LOAN_BALANCE_EOM,
    TOTAL_LOAN_BALANCE_EOM,
    
    -- Portfolio composition percentages
    CASE 
        WHEN TOTAL_LOAN_BALANCE_EOM > 0 
        THEN (AUTO_LOAN_BALANCE_EOM / TOTAL_LOAN_BALANCE_EOM) * 100 
        ELSE 0 
    END AS AUTO_LOAN_PCT_OF_PORTFOLIO,
    
    CASE 
        WHEN TOTAL_LOAN_BALANCE_EOM > 0 
        THEN (CREDIT_CARD_BALANCE_EOM / TOTAL_LOAN_BALANCE_EOM) * 100 
        ELSE 0 
    END AS CREDIT_CARD_PCT_OF_PORTFOLIO,
    
    CASE 
        WHEN TOTAL_LOAN_BALANCE_EOM > 0 
        THEN (MORTGAGE_BALANCE_EOM / TOTAL_LOAN_BALANCE_EOM) * 100 
        ELSE 0 
    END AS MORTGAGE_PCT_OF_PORTFOLIO,
    
    -- Month-over-month changes
    AUTO_LOAN_BALANCE_EOM - LAG(AUTO_LOAN_BALANCE_EOM, 1) OVER (ORDER BY METRIC_MONTH) AS AUTO_LOAN_MOM_CHANGE,
    TOTAL_LOAN_BALANCE_EOM - LAG(TOTAL_LOAN_BALANCE_EOM, 1) OVER (ORDER BY METRIC_MONTH) AS TOTAL_LOAN_MOM_CHANGE,
    NEW_MEMBERS_MONTH - LAG(NEW_MEMBERS_MONTH, 1) OVER (ORDER BY METRIC_MONTH) AS NEW_MEMBERS_MOM_CHANGE
    
FROM monthly_metrics
ORDER BY METRIC_MONTH DESC;

-- =====================================================================
-- Verification
-- =====================================================================

-- Show all created views
SHOW VIEWS;

SELECT 'Semantic model creation completed successfully!' AS STATUS;

-- Display sample row counts from each view
SELECT 'MEMBER_ACQUISITION_VIEW' AS VIEW_NAME, COUNT(*) AS ROW_COUNT FROM MEMBER_ACQUISITION_VIEW
UNION ALL
SELECT 'CERTIFICATE_RENEWAL_VIEW', COUNT(*) FROM CERTIFICATE_RENEWAL_VIEW
UNION ALL
SELECT 'LOAN_PORTFOLIO_VIEW', COUNT(*) FROM LOAN_PORTFOLIO_VIEW
UNION ALL
SELECT 'CREDIT_CARD_HEALTH_VIEW', COUNT(*) FROM CREDIT_CARD_HEALTH_VIEW
UNION ALL
SELECT 'BRANCH_PERFORMANCE_VIEW', COUNT(*) FROM BRANCH_PERFORMANCE_VIEW
UNION ALL
SELECT 'TIME_SERIES_METRICS_VIEW', COUNT(*) FROM TIME_SERIES_METRICS_VIEW
ORDER BY VIEW_NAME;

